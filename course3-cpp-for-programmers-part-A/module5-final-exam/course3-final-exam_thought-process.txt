int a = 2, b = -3, c = 2; 
bool tval1 = false, tval2 = true;
char ch = 'b';


b + c * a

Step-by-step:

c * a = 2 * 2 = 4

b + (c * a) = -3 + 4 = 1

Answer: 1


c % 5 / 2

Step-by-step:

c % 5 = 2 % 5 = 2

2 / 2 = 1

Answer: 1


-a * c++

Step-by-step:

Post-increment (c++) means use c first (which is 2), then increment it afterward.

-a * c = -2 * 2 = -4

After the expression, c becomes 3 (but that doesn’t affect the current expression’s value).

Answer: -4



tval1 && tval2

Step-by-step:

false && true = false

Answer: false



ch += 2

Step-by-step:

'b' has ASCII value 98

98 + 2 = 100

ASCII 100 is 'd'

So ch becomes 'd'

Answer: 'd'




10. printin is a keyword in C++11. False 

C++11 introduced several new keywords such as constexpr, nullptr, noexcept, override, and final, but printin is not among them.


11. In the expression f(1) || (!g(2)), and without knowing the return types of f(1) and g(2), you can still assert that f(1) will always be evaluated before g(2) (which may not get evaluated at all). True 

In C++, the logical OR operator (||) evaluates from left to right and uses short-circuit evaluation.

That means:

f(1) is always evaluated first.

If f(1) evaluates to a true (nonzero) value, then the overall expression is already true — so g(2) will not be evaluated.

If f(1) evaluates to false, then (!g(2)) will be evaluated to determine the final result.

Thus, even without knowing the return types (as long as they can be used in a Boolean context), we can assert that f(1) is evaluated before g(2), and g(2) may not be evaluated at all.



FOR QUESTIONS 12–16 REFER TO THE FOLLOWING:

Answer number that is returned by mystery() for each answer in printout.

//templates what gets printed

#include <iostream>

using namespace std;

template <class T1, class T2>

int mystery(T1& a, T2 b, int c)

{

      T1 t = a;

      a = a + b;

      return ( a - t + c);

}
int main(void)

{

      int a = 3;

      double b = 2.5;

      int c = 1;

      cout << " answer 1 is  " << mystery(a, 2, c) << endl;

      cout << " answer 2 is  " << mystery(a, 1, c) << endl;

      a = 5;

      cout << " answer 3 is  " << mystery(a, b, c) << endl;

      a = 2; 

      b = 2.5;

      cout << " answer 4 is  " << mystery(a, b, b) << endl;

      cout << " answer 5 is  " << mystery(a,mystery(a, b, b),c)<< endl;

      return 0;

}




template <class T1, class T2>
int mystery(T1& a, T2 b, int c)
{
    T1 t = a;
    a = a + b;
    return (a - t + c);
}


What the function does

Makes a copy of a called t.

Updates a → a = a + b

Returns (a - t + c)

Simplify:
Since t = old a, and a = old a + b,

a - t = (old a + b) - (old a) = b

So the function always returns b + c,
and also modifies a → a = a + b.

So the return value is always b + c,
and the side effect is to increase a by b.




int a = 3;
double b = 2.5;
int c = 1;


Explanation for Answer 1: 
mystery(a, 2, c)

a = 3, b = 2, c = 1

Return = b + c = 2 + 1 = 3

Side effect: a = a + b = 3 + 2 = 5

Answer 1 is 3




Explanation for Answer 2:
mystery(a, 1, c)

Current a = 5, b = 1, c = 1

Return = 1 + 1 = 2

Side effect: a = 5 + 1 = 6

Answer 2 is 2




Explanation for Answer 3:
a = 5;
mystery(a, b, c)

a = 5, b = 2.5, c = 1

Return = b + c = 2.5 + 1 = 3.5

Side effect: a = 5 + 2.5 = 7.5 → but since a is int, it becomes 7

Answer 3 is 3.5




Explanation for Answer 4:
a = 2;
b = 2.5;
mystery(a, b, b)

a = 2, b = 2.5, c = b = 2.5

Return = b + c = 2.5 + 2.5 = 5.0

Side effect: a = 2 + 2.5 = 4.5 → stored as 4 (int)

Answer 4 is 5




Explanation for Answer 5: 
mystery(a, mystery(a, b, b), c)

We must evaluate the inner call first:

Inner: mystery(a, b, b)

Current a = 4, b = 2.5, c = b = 2.5

Return = b + c = 2.5 + 2.5 = 5.0

Side effect: a = 4 + 2.5 = 6.5 → 6 (int)

So inner returns 5, and now a = 6.

Outer: mystery(a, 5, c)

Now a = 6, b = 5, c = 1

Return = b + c = 5 + 1 = 6

Side effect: a = 6 + 5 = 11

Answer 5 is 6




FOR QUESTIONS 20–24 REFER TO THE FOLLOWING:

 //What does the following print

#include <iostream>

    #include <vector>

    #include <numeric>

    using namespace std;

int main()

    {

        vector<int> data(5,1);

        int sum {0};

    cout << sum << endl;

        for(auto element : data)

             sum += element;

        cout << sum << endl;

    for(auto p = ++data.begin(); p != --data.end(); ++p)
sum += *p;

        cout << sum << endl;

        sum = 0;

        data.push_back(2);

        data.push_back(3);

        for(auto element : data)

             sum += element;

        cout << sum << endl;

    cout << accumulate(data.begin(), data.end(), data[0]) << endl;

    }




Step-by-step Execution
Initial state:

data = {1,1,1,1,1}
sum = 0



First Output

cout << sum << endl;

sum = 0

First line prints: 0




Second Output 

for (auto element : data)
    sum += element;

Each element is 1, five times → sum = 0 + 1 + 1 + 1 + 1 + 1 = 5

Second line prints: 5



Third Output

for (auto p = ++data.begin(); p != --data.end(); ++p)
    sum += *p;

Let’s decode:

data.begin() → iterator to first element

++data.begin() → iterator to second element

data.end() → one past last, so --data.end() → iterator to last element

The loop runs from second element up to (but not including) the last element.

So it adds elements at positions 1, 2, and 3 (0-based indices).
Those are all 1s.

So adds 1 + 1 + 1 = 3 to current sum.

Current sum = 5 + 3 = 8

Third line prints: 8




Fourth Output

sum = 0;
data.push_back(2);
data.push_back(3);

Now data = {1,1,1,1,1,2,3}
Sum of all elements = 1+1+1+1+1+2+3 = 10

Fourth line prints: 10





Fifth Output

cout << accumulate(data.begin(), data.end(), data[0]) << endl;

data[0] = 1, so this starts the accumulation at 1, then adds all elements of the vector.

Sum of all elements = 10, so:

accumulate = 1 (initial) + 10 (sum of data) = 11

Fifth line prints: 11



